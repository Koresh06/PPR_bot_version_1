from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from database.requests import *
from keyboards.kb_inline import *
from keyboards.kb_reply import *
from filters.filter_bot import *
from lexicon import LEXICON

router = Router()


class Register_address(StatesGroup):
    region = State()
    street = State()
    house = State()
    flat = State()
    full_name = State()
    telephone = State()
    violations = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user = await add_new_user(message.from_user.id)
    if user:
        await message.answer(f'<b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫</b> {message.from_user.first_name}', reply_markup=await kb_menu())
    else:
        await state.set_state(Register_address.region)
        await state.update_data(user=message.from_user.id)
        await message.answer(f'–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {message.from_user.first_name}\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í—ã –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∏ —Å –¥–∞–Ω–Ω—ã–π –±–æ—Ç–æ–º, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º –í–∞—à –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –ñ–≠–° –æ–±—Å–ª–µ–¥—É–µ–º–æ–≥–æ –∞–¥—Ä–µ—Å–∞:', reply_markup=await region_kb())   


@router.message(F.text == '–û–ø–∏—Å–∞–Ω–∏–µ')
async def cmd_description(message: Message):
    await message.answer(
        '–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö:\n<i>- –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞/–∂–∏–ª—å—Ü–∞ (–∞–¥—Ä–µ—Å, –§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω);</i>\n<i>- –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è</i>\n<i>- —Å—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π</i>\n<i>- –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ—Ä—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è</i>\n\n<b>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é</b> ‚§µÔ∏è'
    )

#–û—Ç–º–µ–Ω–∞
@router.callback_query(F.data == 'cancel')
async def cmd_cancel(callback: CallbackQuery, state: FSMContext):
    try:
        callback.message.delete()
    except:
        print('error 1')
    try:
        await state.clear()
    except:
        print('error 2')
    await callback.message.answer(text=f'–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ {callback.from_user.first_name}', reply_markup=await kb_menu())
    await callback.answer()
    
    
#–ó–∞–ø–∏—Å—å –∞–¥—Ä–µ—Å–∞ –≤ –ë–î
@router.message(UpdateRecord())
async def cmd_update_record(message: Message, state: FSMContext):
    await state.set_state(Register_address.region)
    await state.update_data(user=message.from_user.id)
    await message.answer('<i>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ñ–≠–°:</i>', reply_markup=await region_kb())
        

@router.callback_query(Register_address.region)
async def reg_region(callback: CallbackQuery, state: FSMContext):
    await state.update_data(region=callback.data)
    await callback.answer()
    await callback.message.answer(text='<i>–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É:</i>', reply_markup=cancel)
    region = await state.get_data()
    if await set_region_db(region):
        print('–†–µ–≥–∏–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω')
    else:
        print('–û—à–∏–±–∫–∞!')
    await state.set_state(Register_address.street)


@router.message(Register_address.street)
async def reg_street(message: Message, state: FSMContext):
    await state.update_data(street=message.text)
    await message.answer('<i>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞:</i>', reply_markup=cancel)
    await state.set_state(Register_address.house)


@router.message(Register_address.house)
async def reg_street(message: Message, state: FSMContext):
    await state.update_data(house=message.text)
    await message.answer('<i>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:</i>', reply_markup=cancel)
    await state.set_state(Register_address.flat)


@router.message(Register_address.flat)
async def reg_street(message: Message, state: FSMContext):
    await state.update_data(flat=message.text)
    await message.answer('<i>–£–∫–∞–∂–∏—Ç–µ –§–ò–û:</i>', reply_markup=cancel)
    await state.set_state(Register_address.full_name)


@router.message(Register_address.full_name)
async def reg_street(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer('<i>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i>', reply_markup=cancel)
    await state.set_state(Register_address.telephone)


@router.message(Register_address.telephone)
async def reg_flat(message: Message, state: FSMContext):
    await state.update_data(telephone=message.text)
    await message.answer('<i>–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π:</i>', reply_markup=cancel)
    address = await state.get_data()
    get_address_data = await set_address_db(address)
    if get_address_data:
        await state.update_data(address=get_address_data)
        print('–ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω')
    else:
        print('–û—à–∏–±–∫–∞!')
    await state.set_state(Register_address.violations)


@router.message(Register_address.violations)
async def reg_violations(message: Message, state: FSMContext):
    await state.update_data(violations=message.text)
    violations = await state.get_data()
    if await set_violations_db(violations):
        await message.answer('‚úÖ <b>–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>')
    else:
        await message.answer('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>')
    await state.clear()


# –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î

@router.message(Output_addresses())
async def cmd_output_addresses(message: Message):
    await message.answer('<i>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ñ–≠–°:</i>', reply_markup=await region_kb())
    
    
@router.callback_query(F.data.in_(LEXICON.reg_nomer()))
async def region_output(callback: CallbackQuery):
    try:
        address = await output_addresses_db(callback.data, callback.from_user.id)
        count = 0
        for _ in address._fetchiter_impl():
            count += 1
        if count > 0:
            await callback.message.answer(text=f'<b><i>–ê–¥—Ä–µ—Å–∞ –ñ–≠–° ‚Ññ{callback.data[1]}</i></b>', reply_markup= await inline_address(callback.data, callback.from_user.id))
            await callback.answer(text=f'–í—ã–±—Ä–∞–Ω –ñ–≠–° ‚Ññ{callback.data[1]}')
        else:
            await callback.message.answer(f'<b><i>–ê–¥—Ä–µ—Å–æ–≤ –≤ –ñ–≠–° ‚Ññ{callback.data[1]}</i></b>- <u>–Ω–µ –Ω–∞–π–¥–µ–Ω–æ</u>')
            await callback.answer()
    except:
        await callback.message.answer('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>')
        

@router.callback_query(IsDigitCallbackData())
async def violations_output(callback: CallbackQuery):
    inform = await full_information_output_db(callback.data, callback.from_user.id)
    await callback.message.answer(f'<b>–î–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É</b>\n\n–ê–¥—Ä–µ—Å: —É–ª.<i><u>{inform[0][0]}, –¥.{inform[0][1]}, –∫–≤.{inform[0][2]}</u></i>\n–§–ò–û: <i><u>{inform[0][3]}</u></i>\n–¢–µ–ª–µ—Ñ–æ–Ω: <i><u>{inform[0][4]}</u></i>\n\n<b>–ù–∞—Ä—É—à–µ–Ω–∏—è:</b> <tg-spoiler>{inform[1]}</tg-spoiler>')
    await callback.answer()
    
    
@router.message()
async def send_echo(message: Message):
    await message.answer(text='ü§® –ù–µ –ø–æ–Ω–∏–º–∞—é')